import{_ as u,r as h,o as p,c as _,b as o,d as t,w as i,e,a as c,h as d}from"./app.02a9e6a4.js";const g=o("h1",{id:"contributing",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#contributing","aria-hidden":"true"},"#"),e(" Contributing")],-1),m=o("p",null,"Welcome to the contributor's guide! Here you'll find everything you need to know about contributing to Miasma.",-1),f={class:"table-of-contents"},b=e("Required Tools"),v=e("Project Structure"),k=e("Running Locally"),w=e("GraphQL API"),y=e("Web UI"),I=e("Docs"),x=e("CLI"),T=e("Building for Production"),L=e("Docker Image"),G=e("Docs"),C=e("CLI"),P=e("Contributors"),q=o("h2",{id:"required-tools",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#required-tools","aria-hidden":"true"},"#"),e(" Required Tools")],-1),A={href:"https://www.gnu.org/software/make/",target:"_blank",rel:"noopener noreferrer"},U=e("GNU "),M=o("code",null,"make",-1),j=e(" to run scripts"),H={href:"https://go.dev/doc/install",target:"_blank",rel:"noopener noreferrer"},N=e("Go 1.18"),V=e(" to build the CLI"),D={href:"https://nodejs.org/en/",target:"_blank",rel:"noopener noreferrer"},Q=e("Node 16 LTS"),R=e(" to run the UI in dev mode"),S={href:"https://docs.docker.com/get-docker/",target:"_blank",rel:"noopener noreferrer"},W=e("Docker"),B=e(" to build the server and production docker image"),$=o("h2",{id:"project-structure",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#project-structure","aria-hidden":"true"},"#"),e(" Project Structure")],-1),O={style:{"background-color":"var(--c-tip-bg)"}},E=e(""),F=e(`
  `),K=e(`
    `),Y=e(`
  `),Z=e(`
    `),z=e(`
      `),J=e(`
  `),X=e(`
  `),ee=e(`
    `),oe=e(`
    `),te=e(`
    `),ne=e(`
  `),se=e(`
  `),ae=e(`
  `),ie=e(`
  `),re=e(`
  `),ce=e(`
`),de=c(`<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Hover over a folder or file to see it&#39;s description</p></div><h2 id="running-locally" tabindex="-1"><a class="header-anchor" href="#running-locally" aria-hidden="true">#</a> Running Locally</h2><p>To develop and run Miasma locally, it&#39;s best to run each &quot;part&quot; individually. This will give you the fastest start times and hot reloading (for most of the apps).</p><h3 id="graphql-api" tabindex="-1"><a class="header-anchor" href="#graphql-api" aria-hidden="true">#</a> GraphQL API</h3><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">make</span> run
</code></pre></div><p>This runs the Miasma Server in development mode on port <code>3000</code>, excluding the web UI. Including the web UI in this process really slows down this command.</p><p><strong>This is the only dev command does not reload on save</strong>. You have to stop and start it manually.</p>`,7),le=e("The app is written with "),he={href:"https://go.dev",target:"_blank",rel:"noopener noreferrer"},ue=e("Go"),pe=e(" and "),_e={href:"https://gqlgen.com/",target:"_blank",rel:"noopener noreferrer"},ge=e("GQLGen"),me=e("."),fe=c(`<h4 id="changing-the-graphql-schema" tabindex="-1"><a class="header-anchor" href="#changing-the-graphql-schema" aria-hidden="true">#</a> Changing the GraphQL Schema</h4><p>To make changes to the schema, edit any of the schema files in the <code>api/</code> directory, and run:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">make</span> gen
</code></pre></div><p>This will regenerate all the GQLGen files and leave queries/mutations as <code>panic(&quot;not implemented&quot;)</code>.</p><h3 id="web-ui" tabindex="-1"><a class="header-anchor" href="#web-ui" aria-hidden="true">#</a> Web UI</h3><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">make</span> ui
</code></pre></div><p>This runs the UI in watch mode on port <code>8080</code>.</p><p>Normally the UI just uses <code>/graphql</code> as the API endpoint, but during development when the API is ran separately, it uses <code>http://localhost:3000/graphql</code>.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Make sure you have the API running so the UI has something to communicate with.</p></div>`,9),be=e("The app is written in "),ve={href:"https://v2.vuepress.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},ke=e("Vue"),we=e(" and bundled by "),ye={href:"https://vitejs.dev/",target:"_blank",rel:"noopener noreferrer"},Ie=e("Vite"),xe=e("."),Te=c(`<h3 id="docs" tabindex="-1"><a class="header-anchor" href="#docs" aria-hidden="true">#</a> Docs</h3><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">make</span> doc
</code></pre></div><p>This runs the docs website on port <code>8081</code>.</p>`,3),Le=e("The website is made using "),Ge={href:"https://v2.vuepress.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},Ce=e("VuePress"),Pe=e(", and published to "),qe={href:"https://pages.github.com/",target:"_blank",rel:"noopener noreferrer"},Ae=e("GitHub pages"),Ue=e("."),Me=c(`<h3 id="cli" tabindex="-1"><a class="header-anchor" href="#cli" aria-hidden="true">#</a> CLI</h3><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token comment"># Compile and install to your $PATH</span>
<span class="token function">make</span> cli

<span class="token comment"># Then use the CLI</span>
miasma-dev connect localhost:3000
miasma-dev apps
</code></pre></div><p>Make sure you&#39;ve set the <code>$GOPATH</code> environment varaible and it&#39;s on your <code>$PATH</code>. If <code>$GOPATH</code> is not set, the command will fail. If <code>$GOPATH</code> isn&#39;t in your <code>$PATH</code>, then your shell won&#39;t be able to locate the <code>miasma-dev</code> command.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>If you have the CLI installed already, <code>miasma-dev</code> will use the same <code>~/.miasma.yml</code> config file.</p></div>`,4),je=e("See the "),He={href:"https://github.com/aklinker1/miasma/blob/74b1d25009432262112d1627c0bdd69d46826722/Makefile#L56-L61",target:"_blank",rel:"noopener noreferrer"},Ne=o("code",null,"cli",-1),Ve=e(" target in the "),De=o("code",null,"Makefile",-1),Qe=e(" for more details."),Re=e("The CLI is written with "),Se={href:"https://go.dev",target:"_blank",rel:"noopener noreferrer"},We=e("Go"),Be=e(", "),$e={href:"https://cobra.dev/",target:"_blank",rel:"noopener noreferrer"},Oe=o("code",null,"spf13/cobra",-1),Ee=e(", and "),Fe={href:"https://github.com/spf13/viper",target:"_blank",rel:"noopener noreferrer"},Ke=o("code",null,"spf13/viper",-1),Ye=e("."),Ze=c(`<h2 id="building-for-production" tabindex="-1"><a class="header-anchor" href="#building-for-production" aria-hidden="true">#</a> Building for Production</h2><h3 id="docker-image" tabindex="-1"><a class="header-anchor" href="#docker-image" aria-hidden="true">#</a> Docker Image</h3><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">make</span> build
</code></pre></div><p>This builds the production docker image, <code>aklinker1/miasma</code>. This image includes the GraphQL API and Web UI.</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">make</span> preview
</code></pre></div><p>This will build and run the production docker image. This is slower than running the GraphQL API and Web UI part individually while during development, but is useful to verify they are integrated correctly.</p><h3 id="docs-1" tabindex="-1"><a class="header-anchor" href="#docs-1" aria-hidden="true">#</a> Docs</h3><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">make</span> docs
</code></pre></div><p>This will bundle the VuePress docs website to <code>docs/docs/.vuepress/dist</code>.</p><h3 id="cli-1" tabindex="-1"><a class="header-anchor" href="#cli-1" aria-hidden="true">#</a> CLI</h3><div class="custom-container danger"><p class="custom-container-title">TODO</p></div><h2 id="contributors" tabindex="-1"><a class="header-anchor" href="#contributors" aria-hidden="true">#</a> Contributors</h2><br><a href="https://github.com/aklinker1/miasma/graphs/contributors"><img src="https://contrib.rocks/image?repo=aklinker1/miasma"></a><p>Special thanks to myself for being the only contributor (thus far)! \u{1F389}</p>`,15),ze={__name:"contributing.html",setup(Je){const s=r=>{var l,a,n;return d("span",{title:(l=r.description)!=null?l:"No description",style:{display:"inline-flex","align-items":"center",height:"19px",color:"var()",cursor:"pointer"}},[r.icon=="folder"?d("svg",{width:"22",height:"22",viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg"},[d("path",{d:"M10 4H4C2.89 4 2 4.89 2 6V18C2 19.097 2.903 20 4 20H20C21.097 20 22 19.097 22 18V8C22 7.46957 21.7893 6.96086 21.4142 6.58579C21.0391 6.21071 20.5304 6 20 6H12L10 4Z",fill:"currentColor"})]):d("img",{src:`https://raw.githubusercontent.com/PKief/vscode-material-icon-theme/main/icons/${(n=r.icon)!=null?n:(a=r.name.split(".").pop())==null?void 0:a.toLowerCase()}.svg`,width:"22"})," "+r.name])};return(r,l)=>{const a=h("RouterLink"),n=h("ExternalLinkIcon");return p(),_("div",null,[g,m,o("nav",f,[o("ul",null,[o("li",null,[t(a,{to:"#required-tools"},{default:i(()=>[b]),_:1})]),o("li",null,[t(a,{to:"#project-structure"},{default:i(()=>[v]),_:1})]),o("li",null,[t(a,{to:"#running-locally"},{default:i(()=>[k]),_:1}),o("ul",null,[o("li",null,[t(a,{to:"#graphql-api"},{default:i(()=>[w]),_:1})]),o("li",null,[t(a,{to:"#web-ui"},{default:i(()=>[y]),_:1})]),o("li",null,[t(a,{to:"#docs"},{default:i(()=>[I]),_:1})]),o("li",null,[t(a,{to:"#cli"},{default:i(()=>[x]),_:1})])])]),o("li",null,[t(a,{to:"#building-for-production"},{default:i(()=>[T]),_:1}),o("ul",null,[o("li",null,[t(a,{to:"#docker-image"},{default:i(()=>[L]),_:1})]),o("li",null,[t(a,{to:"#docs-1"},{default:i(()=>[G]),_:1})]),o("li",null,[t(a,{to:"#cli-1"},{default:i(()=>[C]),_:1})])])]),o("li",null,[t(a,{to:"#contributors"},{default:i(()=>[P]),_:1})])])]),q,o("ul",null,[o("li",null,[o("a",A,[U,M,t(n)]),j]),o("li",null,[o("a",H,[N,t(n)]),V]),o("li",null,[o("a",D,[Q,t(n)]),R]),o("li",null,[o("a",S,[W,t(n)]),B])]),$,o("pre",O,[E,t(s,{name:"miasma/",icon:"folder"}),F,t(s,{name:"api",icon:"folder-api"}),K,t(s,{name:"*.graphqls",description:"GraphQL schema definitions for the API",icon:"graphql"}),Y,t(s,{name:"cmd/",description:"Go executable entrypoints",icon:"folder"}),Z,t(s,{name:"*/",description:"Binary name",icon:"folder"}),z,t(s,{name:"main.go",description:"Main packages for go executables"}),J,t(s,{name:"docs/",description:"VuePress documentation website",icon:"folder-docs"}),X,t(s,{name:"internal/",description:"Go package for Miasma types, like GraphQL models",icon:"folder"}),ee,t(s,{name:"server/",description:"Go package for server only code",icon:"folder"}),oe,t(s,{name:"cli/",description:"Go package for CLI only code",icon:"folder"}),te,t(s,{name:"utils/",description:"Go package for shared utilities",icon:"folder-utils"}),ne,t(s,{name:"web/",description:"Vue based Web UI",icon:"folder-public"}),se,t(s,{name:"Dockerfile",description:"Production dockerfile that builds both the server and UI",icon:"docker"}),ae,t(s,{name:"Dockerfile.dev",description:"Dockerfile that only builds the server, and excludes the UI for development",icon:"docker"}),ie,t(s,{name:"Makefile",description:"Contains project scripts for building and running all the different parts of Miasma"}),re,t(s,{name:"meta.json",description:"Contains metadata about the current version of Miasma"}),ce]),de,o("p",null,[le,o("a",he,[ue,t(n)]),pe,o("a",_e,[ge,t(n)]),me]),fe,o("p",null,[be,o("a",ve,[ke,t(n)]),we,o("a",ye,[Ie,t(n)]),xe]),Te,o("p",null,[Le,o("a",Ge,[Ce,t(n)]),Pe,o("a",qe,[Ae,t(n)]),Ue]),Me,o("p",null,[je,o("a",He,[Ne,Ve,De,t(n)]),Qe]),o("p",null,[Re,o("a",Se,[We,t(n)]),Be,o("a",$e,[Oe,t(n)]),Ee,o("a",Fe,[Ke,t(n)]),Ye]),Ze])}}};var eo=u(ze,[["__file","contributing.html.vue"]]);export{eo as default};

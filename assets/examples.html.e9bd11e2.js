import{_ as c,r as i,o as d,c as p,b as e,d as n,w as o,e as s,a as r}from"./app.02a9e6a4.js";const l={},h=e("h1",{id:"example-apps",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#example-apps","aria-hidden":"true"},"#"),s(" Example Apps")],-1),u=s("Here are some example apps setup and configured through the "),_=s("Miasma CLI"),m=s("."),g={class:"table-of-contents"},b=s("Docker Registry"),k=s("MongoDB"),f=s("Mongo Express"),x=s("Redis"),v=s("Postgres"),y=s("Nginx Based Website"),q=e("h2",{id:"docker-registry",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#docker-registry","aria-hidden":"true"},"#"),s(" Docker Registry")],-1),w=s("Host an insecure "),B={href:"https://hub.docker.com/_/registry/",target:"_blank",rel:"noopener noreferrer"},M=s("docker registry"),R=s("."),C=r(`<div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token comment"># Create the app</span>
miasma apps:create docker-registry -i registry:2.7

<span class="token comment"># Configure it&#39;s ports, node placement, and mounted volume for data storage</span>
miasma apps:edit -a docker-registry <span class="token punctuation">\\</span>
    --add-target-ports <span class="token number">5000</span> <span class="token punctuation">\\</span>
    --add-placement-constraint <span class="token string">&quot;node.labels.database == true&quot;</span> <span class="token punctuation">\\</span>
    --add-volume /dir/path/on/physical/machine:/var/lib/registry

<span class="token comment"># Give it a route</span>
miasma route:set --hostname docker.hostname.com
</code></pre></div>`,1),N=s("Because this is an insecure registry, you have to "),D={href:"https://docs.docker.com/registry/insecure/",target:"_blank",rel:"noopener noreferrer"},E=s("configure docker to allow it"),I=s(" by editing the Docker daemon config:"),P=r(`<div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token comment">// /etc/docker/daemon.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;insecure-registries&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;docker.hostname.com&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then restart the computer so the changes take effect.</p><p>If you want to use the registry as a source for Miasma apps, each node also needs to update their daemon config and restart.</p><h2 id="mongodb" tabindex="-1"><a class="header-anchor" href="#mongodb" aria-hidden="true">#</a> MongoDB</h2>`,4),j=s("Create the "),L={href:"https://hub.docker.com/_/mongo/",target:"_blank",rel:"noopener noreferrer"},T=s("MongoDB"),S=s(" instance:"),V=r(`<div class="language-bash ext-sh"><pre class="language-bash"><code>miasma apps:create mongo -i mongo:4
miasma env:edit -a mongo
miasma apps:edit <span class="token punctuation">\\</span>
    --add-placement-constraint <span class="token string">&quot;node.labels.database == true&quot;</span> <span class="token punctuation">\\</span>
    --add-volume <span class="token string">&quot;/dir/path/on/physical/machine&quot;</span>:/data/db <span class="token punctuation">\\</span>
    --add-target-ports <span class="token number">27017</span> --add-published-ports <span class="token number">27017</span>
</code></pre></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Mongo can take a few minutes to startup, so be patient. If it isn&#39;t running, you can troubleshoot by SSHing onto the manager node and running <code>docker service ps miasma-mongo --no-trunc</code></p></div><h3 id="mongo-express" tabindex="-1"><a class="header-anchor" href="#mongo-express" aria-hidden="true">#</a> Mongo Express</h3>`,3),H=s("Optionally, you can also setup "),A={href:"https://hub.docker.com/_/mongo-express/",target:"_blank",rel:"noopener noreferrer"},O=s("Mongo Express"),W=s(" to get a UI for inspecting your mongo app:"),G=r(`<div class="language-bash ext-sh"><pre class="language-bash"><code>miasma apps:create mongo-express -i mongo-express
miasma env:edit -a mongo-express
miasma apps:edit --add-target-ports <span class="token number">8081</span>
</code></pre></div><h2 id="redis" tabindex="-1"><a class="header-anchor" href="#redis" aria-hidden="true">#</a> Redis</h2>`,2),Q=s("Create the "),U={href:"https://hub.docker.com/_/redis/",target:"_blank",rel:"noopener noreferrer"},z=s("Redis"),F=s(" instance. Nothing special here, Redis respects the "),J=e("code",null,"PORT",-1),K=s(" environment variable."),X=e("div",{class:"language-bash ext-sh"},[e("pre",{class:"language-bash"},[e("code",null,`miasma apps:create redis -i redis:6-alpine
`)])],-1),Y=e("h2",{id:"postgres",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#postgres","aria-hidden":"true"},"#"),s(" Postgres")],-1),Z=s("Create the "),$={href:"https://hub.docker.com/_/postgres/",target:"_blank",rel:"noopener noreferrer"},ee=s("PostgreSQL"),se=s(" database. The Postgres docker image can be quite finicky with it's port, so it's best to just set the target and published ports to "),ne=e("code",null,"5432",-1),te=s(", Postgres's default."),ae=r(`<div class="language-bash ext-sh"><pre class="language-bash"><code>miasma apps:create postgres -i postgres:13-alpine
miasma env:edit -a postgres
miasma apps:edit <span class="token punctuation">\\</span>
    --add-placement-constraint <span class="token string">&quot;node.labels.database == true&quot;</span> <span class="token punctuation">\\</span>
    --add-volume <span class="token string">&quot;/dir/path/on/physical/machine&quot;</span>:/var/lib/postgresql/data <span class="token punctuation">\\</span>
    --add-target-ports <span class="token number">5432</span> --add-published-ports <span class="token number">5432</span>
</code></pre></div><h2 id="nginx-based-website" tabindex="-1"><a class="header-anchor" href="#nginx-based-website" aria-hidden="true">#</a> Nginx Based Website</h2>`,2),oe=s("A common way to host a static website in Docker is with the "),re={href:"https://hub.docker.com/_/nginx/",target:"_blank",rel:"noopener noreferrer"},ie=e("code",null,"nginx",-1),ce=s(" image."),de=r(`<div class="language-bash ext-sh"><pre class="language-bash"><code>miasma apps:create example-website -i nginxdemos/hello:plain-text <span class="token comment"># or your custom image</span>
<span class="token comment"># Nginx runs on port 80, and is difficult to change, so just target that port instead</span>
miasma apps:edit -a example-website --add-target-ports <span class="token number">80</span>
</code></pre></div>`,1);function pe(le,he){const t=i("RouterLink"),a=i("ExternalLinkIcon");return d(),p("div",null,[h,e("p",null,[u,n(t,{to:"/reference/cli.html"},{default:o(()=>[_]),_:1}),m]),e("nav",g,[e("ul",null,[e("li",null,[n(t,{to:"#docker-registry"},{default:o(()=>[b]),_:1})]),e("li",null,[n(t,{to:"#mongodb"},{default:o(()=>[k]),_:1}),e("ul",null,[e("li",null,[n(t,{to:"#mongo-express"},{default:o(()=>[f]),_:1})])])]),e("li",null,[n(t,{to:"#redis"},{default:o(()=>[x]),_:1})]),e("li",null,[n(t,{to:"#postgres"},{default:o(()=>[v]),_:1})]),e("li",null,[n(t,{to:"#nginx-based-website"},{default:o(()=>[y]),_:1})])])]),q,e("p",null,[w,e("a",B,[M,n(a)]),R]),C,e("p",null,[N,e("a",D,[E,n(a)]),I]),P,e("p",null,[j,e("a",L,[T,n(a)]),S]),V,e("p",null,[H,e("a",A,[O,n(a)]),W]),G,e("p",null,[Q,e("a",U,[z,n(a)]),F,J,K]),X,Y,e("p",null,[Z,e("a",$,[ee,n(a)]),se,ne,te]),ae,e("p",null,[oe,e("a",re,[ie,n(a)]),ce]),de])}var _e=c(l,[["render",pe],["__file","examples.html.vue"]]);export{_e as default};
